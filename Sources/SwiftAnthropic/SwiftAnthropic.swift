import AsyncHTTPClient
import Foundation
import NIOCore
import NIOFoundationCompat

/// A class which allows for interaction with the anthropic API.
/// 
/// Messages can be sent to an Anthropic model in the simplest fashion  using the ``sendRequest(model:messages:maxTokens:metadata:stopSequences:system:temperature:)`` method.
/// ```swift
/// let anthropic = Anthropic(apiKey: "API Key Here")
/// let response = try await anthropic.send(message: "Hello, Claude!")
/// 
/// // Hello! How can I assist you today? Feel free to ask me any questions or let me know if you need help with anything.
/// print(response.content)
/// ```
/// 
/// Currently, SwiftAnthropic only supports Anthropic's [Message API](https://docs.anthropic.com/en/api/messages). It does not support streaming, tools, or vision.
@available(macOS 10.15, *)
public class Anthropic {
    /// The user's provided API Key.
    private var apiKey: String
    // When this becomes user-definable, we need to throw an error if v2023_01 is chosen.
    private var apiVersion: AnthropicAPIVersion = .v2023_06

    /// Creates an instance of `Anthropic` using a provided API key.
    /// 
    /// API keys can be generated through the [Anthropic Console](https://console.anthropic.com/settings/keys).
    /// 
    /// - Parameters:
    ///   - apiKey: the API key provided by Anthropic.
    public init(apiKey: String) {
        self.apiKey = apiKey
    }

    /// The simplest way to send a single message to an Anthropic model.
    /// 
    /// Internally, this method automatically constructs a ``Request`` object and passes it to ``send(request:)``. 
    /// Consider this method a convenience method for ``send(request:)``. For more information about each parameter or for more 
    /// options, see ``Request`` and ``send(request:)``.
    /// 
    /// ```swift
    /// let anthropic = Anthropic(apiKey: "API Key Here")
    /// let response = try await anthropic.send(message: "Hello, Claude!")
    /// 
    /// // Hello! How can I assist you today? Feel free to ask me any questions or let me know if you need help with anything.
    /// print(response.content)
    /// ```
    /// 
    /// - Parameters:
    ///   - message: The message to send the model.
    ///   - model: The model to complete the request. Defaults to Claude 3.5 Sonnet, a low-cost, high-performance model.
    /// - Returns: A response with data generated by an Anthropic model.
    public func send(message: String, to model: Model = .claude3_5Sonnet) async throws -> Response {
        return try await send(request: Request(
            model: model,
            messages: [Message(message)],
            maxTokens: 1024
        ))
    }

    /// A direct way to send a request to an Anthropic model.
    /// 
    /// Internally, this method automatically constructs a ``Request`` object and passes it to ``send(request:)``. 
    /// Consider this method a convenience method for ``send(request:)``. For more information about each parameter or for more 
    /// options, see ``Request`` and ``send(request:)``.
    /// 
    /// let anthropic = Anthropic(apiKey: "API Key Here")
    /// let response = try await anthropic.sendRequest(
    ///     messages: [Message("Hello, Claude!")]
    /// )
    /// 
    /// // Hello! How can I assist you today? Feel free to ask me any questions or let me know if you need help with anything.
    /// print(response.content)
    /// 
    /// - Parameters:
    ///   - model: The model that will complete your prompt.
    ///   - messages: Input messages.
    ///   - maxTokens: The maximum number of tokens to generate before stopping. 
    ///   - metadata: An object describing metadata about the request.
    ///   - stopSequences: Custom text sequences that will cause the model to stop generating.
    ///   - system: A system prompt: a way of providing context and instructions to Claude, such as specifying a particular goal or role.
    ///   - temperature: Amount of randomness injected into the response, from 0.0 to 1.0.
    /// - Returns: A response with data generated by an Anthropic model.
    public func sendRequest(
        model: Model = .claude3_5Sonnet,
        messages: [any ContentfulMessage],
        maxTokens: Int = 1024,
        metadata: Metadata? = nil,
        stopSequences: [String] = [],
        // stream: Bool? = false
        system: String = "",
        temperature: Double = 1.0
        // tool_choice: SomeEnum?
        // tools: [AnthropicTool]?
    ) async throws -> Response {
        return try await send(request: Request(
            model: model,
            messages: messages,
            maxTokens: maxTokens,
            metadata: metadata,
            stopSequences: stopSequences,
            stream: false,
            system: system,
            temperature: temperature
        ))
    }

    /// A flexible way to send a request to an Anthropic model.
    /// 
    /// This method exposes all configuration options available through Anthropic's [Message API](https://docs.anthropic.com/en/api/messages)
    /// through the ``Request`` object. See ``Request`` for details about configuration.
    /// 
    /// let anthropic = Anthropic(apiKey: "API Key Here")
    /// let response = try await anthropic.send(request: Request(
    ///     model: .claude3_5Sonnet
    ///     messages: [
    ///         Message("What's the best programming language?", role: .user),
    ///         Message("The best programming language is", role: .assistant)
    ///     ],
    ///     maxTokens: 32
    /// ))
    /// 
    /// // The Swift Programming Language :)
    /// print(response.content)
    /// 
    /// - Parameters:
    ///   - request: A configuration object defining the details of the request.
    /// - Returns: A response with data generated by an Anthropic model.
    public func send(request anthropicRequest: Request) async throws -> Response {
        let httpClient = HTTPClient(eventLoopGroupProvider: .singleton)

        // Set up the request
        var httpRequest = HTTPClientRequest(url: "https://api.anthropic.com/v1/messages")
        httpRequest.method = .POST
        httpRequest.headers.add(name: "content-type", value: "application/json")
        httpRequest.headers.add(name: "x-api-key", value: apiKey)
        httpRequest.headers.add(name: "anthropic-version", value: apiVersion.rawValue)
        httpRequest.body = .bytes(try JSONEncoder().encodeAsByteBuffer(anthropicRequest, allocator: .init()))

        // Execute the request
        let httpResponse = try await httpClient.execute(httpRequest, timeout: .seconds(40))
        let body = try await httpResponse.body.collect(upTo: 1024 * 1024) // 1 MB
        let anthropicResponse = try JSONDecoder().decode(Response.self, from: body)

        // Shut down the HTTP client and send the request back
        try await httpClient.shutdown()
        return anthropicResponse
    }
}
